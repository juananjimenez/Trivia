DOCUMENTATION

UDACITRIVIA

This is a project to let Udacity employers has a great internal cometition leisure tool.
The code is written under the Pep-8 principles.

GETTING STARTED

The stack of the application is Flask for the backend and React for the frontend. The 
database is Postgresql. The project was developed internally so the url is refering a 
localhost owned by Udacity.


API REFERENCE

GET '/questions'

Fetches a dictionary with all the questions from database.
Request arguments: None
There are three responses, first a value pair list of categories with the category id and the category name. The same for current category. The second is a dictionary
with the questions in a value pair with the question, answer, category, difficulty and id.

 "categories": {
    "1": "Science",
    "2": "Art",
    "3": "Geography",
    "4": "History",
    "5": "Entertainment",
    "6": "Sports"
  },
  "current_category": {
    "1": "Science",
    "2": "Art",
    "3": "Geography",
    "4": "History",
    "5": "Entertainment",
    "6": "Sports"
  },
  "questions": [
    {
      "answer": "Tom Cruise",
      "category": 5,
      "difficulty": 4,
      "id": 4,
      "question": "What actor did author Anne Rice first denounce, then praise in the role of her beloved Lestat?"
    },
    {
      "answer": "Maya Angelou",
      "category": 4,
      "difficulty": 2,
      "id": 5,
      "question": "Whose autobiography is entitled 'I Know Why the Caged Bird Sings'?"
    },

GET '/categories'

Fetches a dictionary with the categories in a value - pair schema. 
Request arguments: None.
This categories display questions by category when selected.

{
  "categories": {
    "1": "Science",
    "2": "Art",
    "3": "Geography",
    "4": "History",
    "5": "Entertainment",
    "6": "Sports"
  },

DELETE '/questions/<int:question_id>'

Delete the question in database
Request arguments: id of the questions (integer value)
When clicked the trash it sends a delete to db. It response the id of the deleted question and when done it a true success.

{
  "deleted": 6,
  "success": true
}


POST '/add'
The form send the request to db. It is not allowed to send empty fields.
Request arguments: None.
The question is added at the end of the whole list.

{
    question: What's the name of spanisk King?
    answer: Felipe VI 
    difficulty: 3
    category: 3
}

POST '/questions'
Using the search field, this action search for terms in question, it allows capitals or not.
Request arguments: None
It returns a list of questions where the search tearm appears. 
The dictionary contains the total number of questions returned. It response too the current category of the questions searched

  "questions": [
    {
      "answer": "Brazil",
      "category": 6,
      "difficulty": 3,
      "question": "Which is the only team to play in every soccer World Cup tournament?"
    }
  ],
  "success": true,
  "totalQuestions": 1
}


GET '/categories/<int:category_id>/questions'

It allows to filter the list of questions by category selected.
Request arguments: category id (integer)
The response is a list of dictionaries with each question.

{
  "currentCategory": null,
  "questions": [
    {
      "answer": "Lake Victoria",
      "category": 3,
      "difficulty": 2,
      "question": "What is the largest lake in Africa?"
    },
    {
      "answer": "The Palace of Versailles",
      "category": 3,
      "difficulty": 3,
      "question": "In which royal palace would you find the Hall of Mirrors?"
    },
    {
      "answer": "Agra",
      "category": 3,
      "difficulty": 2,
      "question": "The Taj Mahal is located in which Indian city?"
    }
  ],
  "success": true,
  "totalQuestions": 3


POST '/play'
Allow to select a cateogry and get random questions of this category
Request arguments: None
When selected category it filters all the questions by this category. It shows a random question (current_question) for the list and you have to fit the answe. 
Displays a message of error when fail and a success when the answer is correct. Clicking next question it show the next one (previousQuestions) in the list. If none, it 
stays.

{
  "currentQuestion": {
    "answer": "Brazil",
    "category": 6,
    "difficulty": 3,
    "id": 10,
    "question": "Which is the only team to play in every soccer World Cup tournament?"
  },
  "previousQuestions": [
    {
      "answer": "Brazil",
      "category": 6,
      "difficulty": 3,
      "id": 10,
      "question": "Which is the only team to play in every soccer World Cup tournament?"
    },
    {
      "answer": "Uruguay",
      "category": 6,
      "difficulty": 4,
      "id": 11,
      "question": "Which country won the first ever soccer World Cup in 1930?"
    }
  ],
  "quizCategory": {
    "id": "6",
    "type": "Sports"
  },
  "success": true
}

DEPLOYEMENT

Frontend

Install Node and NPM This project requires on Nodejs and Node Package Manager (NPM). If you haven't already installed Node on your local machine, see the instructions here: Before continuing, you must download and install Node (the download includes NPM) from Nodejs.com.
Install project dependencies After confirming you have NPM installed, navigate to the frontend directory of the project and run.

npm install
npm start

The frontend folders got public folder with images and media. And src folder where you can find the components and stylesheet.

Backend

Need to install dependencies. Check for updated packages.

pip install -r requirements.txt

Primary dependencies: Flask, SQLAlchemy, Flask-CORS.

To start the server, positioned in backend folder:

export FLASK_APP=flaskr
export FLASK_ENV=development
flask run

Testing: You can test the app an any added route executing in backend folder:

python3 test_flaskr.py 


AUTHORS

Juanan Jim√©nez

ACKNOWLEDGEMENT

All the work wasn't possible without the help of Udacity mentors: Ananta, Chirayu and Promise.
